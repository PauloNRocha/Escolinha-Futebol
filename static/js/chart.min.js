/*! Minimal chart renderer for E.F.C dashboard */
(function(global){
  function drawBars(ctx, data){
    var labels = data.labels || [];
    var datasets = data.datasets || [];
    if(!datasets.length){return;}
    var width = ctx.canvas.width;
    var height = ctx.canvas.height;
    var padding = 40;
    var barWidth = (width - padding*2) / (labels.length * (datasets.length + 1));
    var max = 0;
    datasets.forEach(function(ds){
      ds.data.forEach(function(v){ if(v > max){ max = v; }});
    });
    max = max || 1;
    ctx.clearRect(0,0,width,height);
    ctx.font = '12px Poppins, sans-serif';
    ctx.textAlign = 'center';
    labels.forEach(function(label, i){
      ctx.fillStyle = '#1A2942';
      ctx.fillText(label, padding + (i + 0.5) * (datasets.length + 1) * barWidth, height - 10);
      datasets.forEach(function(ds, j){
        var value = ds.data[i] || 0;
        var barHeight = ((height - padding*1.5) * value) / max;
        var x = padding + (i*(datasets.length+1) + j) * barWidth + barWidth*0.2;
        var y = height - padding - barHeight;
        ctx.fillStyle = ds.backgroundColor || '#0057B7';
        ctx.beginPath();
        ctx.roundRect(x, y, barWidth*0.6, barHeight, 6);
        ctx.fill();
      });
    });
  }
  function Chart(ctx, config){
    if(!(this instanceof Chart)) return new Chart(ctx, config);
    this.ctx = ctx.getContext('2d');
    this.data = config.data || {};
    drawBars(this.ctx, this.data);
  }
  Chart.prototype.update = function(){
    drawBars(this.ctx, this.data);
  };
  if(CanvasRenderingContext2D.prototype.roundRect === undefined){
    CanvasRenderingContext2D.prototype.roundRect = function(x, y, width, height, radius){
      radius = radius || 5;
      this.moveTo(x + radius, y);
      this.lineTo(x + width - radius, y);
      this.quadraticCurveTo(x + width, y, x + width, y + radius);
      this.lineTo(x + width, y + height - radius);
      this.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
      this.lineTo(x + radius, y + height);
      this.quadraticCurveTo(x, y + height, x, y + height - radius);
      this.lineTo(x, y + radius);
      this.quadraticCurveTo(x, y, x + radius, y);
      this.closePath();
    };
  }
  global.Chart = Chart;
})(window);
